#!/bin/bash

# Allow user to override destination dir (useful for testing),
# but default to $HOME
dest_dir=${DEST_DIR-$HOME}
dotfiles_dir=$( cd -P "$(dirname "$0" )" && pwd )

# Find linkables in this script's directory tree
linkables=`find "$dotfiles_dir" -name \*.symlink`

resolve_link_dest() {
  local src=$1
  local dest=

  # Search for a manifest file that will set the destination
  local tmp=$(dirname "$src")
  until [[ "$tmp" == "$dotfiles_dir" ]]
  do
    local manifest=$tmp/.manifest
    if [[ -e "$manifest" ]]
    then
      # Search the manifest for this link's entry

      # First, figure out the path of our link relative to the manifest
      # by stripping $tmp/ from the $src path.  This is a little fragile,
      # but should meet our needs right now.
      local relpath=${src//"$tmp/"}

      # Replace any '.' characters with a '\.' for grep
      relpath=${relpath//"."/"\."}

      # Next, grep for a manifest entry that starts with the relative path
      # And grab the right-hand side of that entry
      candidate=`cat "$manifest" | grep "^$relpath -> " | sed -n -e 's/^.* -> \(.*$\)/\1/p'`

      [ -z "$candidate" ] || dest=$dest_dir/$candidate && break
    fi
    tmp=$(dirname "$tmp")
  done

  # If no manifest, or no destination for this link,
  if [ -z "$dest" ]
  then
    # Strip the .symlink part of the name
    noext=${src%.*}

    # Throw away everything before the last '/', and prefix with a '.'
    targetname=.$(basename "$noext")

    # Build the target path
    dest=$dest_dir/$targetname
  fi

  # "Return" the resulting destination
  echo $dest
}

install() {
  local skip_all=false
  local overwrite_all=false
  local backup_all=false

  for link in $linkables; do
    dest=$(resolve_link_dest "$link")

    overwrite=false
    backup=false

    # If a file or symlink already exists at the destination,
    if [ -e "$dest" ]
    then
      # unless we've already be told to skip all duplicates,
      $skip_all && continue

      # Prompt for an action: overwrite (all), backup (all), skip (all)
      if ! $overwrite_all && ! $backup_all;
      then
        echo "File already exists: $dest, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all"
        read

        case "$REPLY" in
          "o" )
            overwrite=true
            ;;
          "O" )
            overwrite_all=true
            ;;
          "b" )
            backup=true
            ;;
          "B" )
            backup_all=true
            ;;
          "s" )
            continue
            ;;
          "S" )
            skip_all=true
            continue
            ;;
        esac
      fi

      # If overwrite, remove the existing file/symlink
      ($overwrite || $overwrite_all) && rm -f $dest

      # If backup, rename the existing file/symlink with a .backup suffix
      ($backup || $backup_all) && mv "$dest" "${dest}.backup"
    fi

    # Create the directory where symlink will be placed if it doesn't exist
    [[ -e $(dirname "$dest") ]] || mkdir -p "$(dirname "$dest")"

    # Link the file to the destination
    ln -s "$link" "$dest"
  done
}

uninstall() {
  for link in $linkables; do
    dest=$(resolve_link_dest "$link")

    # If a symlink already exists at the target path, remove it
    [[ -h "$dest" ]] && rm -f "$dest"

    # If a backup exists for the target path, restore it
    [[ -e "${dest}.backup" ]] && mv "${dest}.backup" "$dest"
  done
}

case $(basename "$0") in
  "install" )
    install $* ;;
  "uninstall" )
    uninstall $* ;;
  *)
    echo Unknown action $(basename "$0").  Must be one of install, uninstall
    ;;
esac
